# help text - links storage and display
function .links()
{
    local _LINKPATH="misc/"
    local _LINKFILE="${PROGNAME%.*}.links"
    local LINKFILE="${_LINKPATH}${_LINKFILE}"

    if [[ -n "${ARG}" ]]
    then
        read -r -a _ARG <<< "${ARG}"
    else
        local _ARG=""
    fi

    if [[ ! -d "${_LINKPATH}" ]]
    then
        mkdir ${_LINKPATH}
    fi

    >${TMP_FILE1}

    local _CNT=0
    if [[ ${#_ARG[@]} -ge 1 ]]
    then
        case "${_ARG[0]}" in
            'count'|'c')
                if [[ -f ${LINKFILE} ]]
                then
                    printf "%s\n" \
                        "links saved:" \
                        "$(wc -l ${LINKFILE} \
                        | awk '{print $1}')  total" \
                        "$(awk '{print $1}' ${LINKFILE} \
                        | sort \
                        | uniq -c \
                        | column -t )" \
                        | tee -a ${TMP_FILE1} > /dev/null
                else
                    printf "%s\n" \
                        "Link file does not exist." \
                        | tee -a ${TMP_FILE1} > /dev/null
                fi
                source core/chan_text_out.shlib
                _chan_text_out
                ;;
            'find'|'f')
                if [[ -n "${_ARG[1]}" ]]
                then
                    awk '$3 ~ /'${_ARG[1]}'/ {print $3}' <"${LINKFILE}" \
                        | tee -a ${TMP_FILE1} > /dev/null
                else
                    printf "%s\n" \
                        "No word specified" \
                        | tee -a ${TMP_FILE1} > /dev/null
                fi
                source core/chan_text_out.shlib
                _chan_text_out
                ;;
            'save'|'sa'|'sv')
                if [[ -n "${_ARG[1]}" ]]
                then
                    if [[ $(curl -Is ${_ARG[1]} \
                        | head -1) == "HTTP/1.1"* ]]
                then
                    printf "%s\n" \
                        "${NAME} : ${_ARG[1]}" \
                        | tee -a ${LINKFILE} > /dev/null
                    printf "%s\n" \
                        "Saved your link ${NAME}" \
                        | tee -a ${TMP_FILE1} > /dev/null
                else
                    printf "%s\n" \
                        "Link does not seem to work against my tests:" \
                        "curl -Is ${_ARG[1]} | head -1" \
                        | tee -a ${TMP_FILE1} > /dev/null
                fi
                source core/chan_text_out.shlib
                _chan_text_out
            else
                printf "%s\n" \
                    "No link provided" \
                    | tee -a ${TMP_FILE1} > /dev/null
                source core/chan_text_out.shlib
                _chan_text_out
            fi
            ;;
        'show'|'sh')
            if [[ ! -n "${_ARG[1]}" ]]
            then
                tail -n 10 ${LINKFILE} \
                    | awk '{print $3}' \
                    | tee -a ${TMP_FILE1} > /dev/null
            else
                awk '$1 ~ /'${_ARG[1]}'/ {print $3}' <"${LINKFILE}" \
                    | tail -n 10 \
                    | tee -a ${TMP_FILE1} > /dev/null
            fi
            source core/chan_text_out.shlib
            _chan_text_out
            ;;
        *)
            printf "%s\n" \
                "[c]ount       : total links saved" \
                "[f]ind <word> : find links by word" \
                "[sa]ve <link> : saves link to file by nick" \
                "[sh]ow        : this shows the last 10 added links" \
                "[sh]ow <nick> : same as above but by nick" \
                | tee -a ${TMP_FILE1} > /dev/null
            source core/chan_text_out.shlib
            _chan_text_out
            ;;
    esac
fi
}
